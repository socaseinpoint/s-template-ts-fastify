# =============================================================================
# ENVIRONMENT CONFIGURATION
# =============================================================================
# Copy this file to .env and fill in your values
# cp .env.example .env

# =============================================================================
# APPLICATION
# =============================================================================

# Environment: development | production | test
NODE_ENV=development

# Server configuration
PORT=3000
HOST=0.0.0.0

# Logging level: fatal | error | warn | info | debug | trace | silent
LOG_LEVEL=info

# Service information
SERVICE_NAME=fastify-service
SERVICE_VERSION=1.0.0

# Operating mode:
# - all: Run both API and Workers in single process (good for MVP/development)
# - api: Run only API server (production - scale independently)
# - worker: Run only workers (production - scale independently)
MODE=all

# Worker type (only used when MODE=worker):
# - io: High concurrency for API calls (Replicate, OpenAI, webhooks)
# - ffmpeg: Low concurrency for video processing (CPU-heavy)
# - gpu: Very low concurrency for ML inference (GPU-bound)
WORKER_TYPE=io

# =============================================================================
# DATABASE (PostgreSQL)
# =============================================================================
# REQUIRED in production, optional in development (for unit tests)
# Format: postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=public
# Example: postgresql://admin:secret123@localhost:5432/myapp?schema=public

DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tsservice?schema=public

# =============================================================================
# REDIS
# =============================================================================
# REQUIRED in production for:
# - Rate limiting (distributed across instances)
# - Token storage (refresh tokens, blacklist)
# - Queue system (BullMQ)
#
# OPTIONAL in development (will fallback to in-memory storage)

# Option 1: Use REDIS_URL (recommended)
REDIS_URL=redis://localhost:6379

# Option 2: Use individual parameters
REDIS_HOST=127.0.0.1
REDIS_PORT=6379
# REDIS_PASSWORD=your-redis-password-here

# =============================================================================
# JWT AUTHENTICATION
# =============================================================================
# REQUIRED: Generate strong secret with: openssl rand -base64 64
# Must be at least 64 characters for security
# DO NOT use the same secret for staging and production!

JWT_SECRET=CHANGE_ME_GENERATE_WITH_OPENSSL_RAND_BASE64_64_MINIMUM_64_CHARACTERS_REQUIRED

# Token expiration times
JWT_ACCESS_EXPIRES_IN=15m
JWT_REFRESH_EXPIRES_IN=7d

# =============================================================================
# QUEUE CONFIGURATION (BullMQ)
# =============================================================================

# Maximum concurrent jobs per worker
QUEUE_CONCURRENCY=5

# Keep last N completed jobs (for monitoring)
QUEUE_REMOVE_ON_COMPLETE=100

# Keep last N failed jobs (for debugging)
QUEUE_REMOVE_ON_FAIL=1000

# =============================================================================
# SECURITY
# =============================================================================

# CORS Origins
# Development: Use * (any origin)
# Production: MUST specify exact domains (comma-separated)
# Example: https://app.example.com,https://admin.example.com
CORS_ORIGIN=*

# Rate limiting
ENABLE_RATE_LIMIT=true
RATE_LIMIT_MAX=100
RATE_LIMIT_TIMEWINDOW=60000

# =============================================================================
# FASTIFY SERVER TIMEOUTS (milliseconds)
# =============================================================================

REQUEST_TIMEOUT=30000
CONNECTION_TIMEOUT=10000
KEEP_ALIVE_TIMEOUT=5000

# =============================================================================
# FEATURE FLAGS
# =============================================================================

# Enable Prometheus metrics endpoint (/metrics)
ENABLE_METRICS=false

# Enable health check endpoint (/health)
ENABLE_HEALTH_CHECK=true

# Enable Swagger documentation (/docs)
# Recommended: false in production
ENABLE_SWAGGER=true

# =============================================================================
# EXTERNAL SERVICES (Optional)
# =============================================================================

# API Keys for external services
# API_KEY=your-api-key-here

# Example: OpenAI
# OPENAI_API_KEY=sk-...

# Example: Replicate
# REPLICATE_API_TOKEN=r8_...

# Example: AWS
# AWS_ACCESS_KEY_ID=...
# AWS_SECRET_ACCESS_KEY=...
# AWS_REGION=us-east-1

# =============================================================================
# NOTES
# =============================================================================
#
# 1. NEVER commit .env to git (already in .gitignore)
# 2. Use different secrets for staging and production
# 3. Generate JWT_SECRET with: openssl rand -base64 64
# 4. In production, set CORS_ORIGIN to specific domains (not *)
# 5. Use strong passwords for DATABASE_URL and REDIS_PASSWORD
# 6. Set ENABLE_SWAGGER=false in production (security)
#
