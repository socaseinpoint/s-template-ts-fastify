# ==============================================
# TypeScript Service Template - Environment Variables
# ==============================================
# Copy this file to .env and update with your values:
#   cp .env.example .env
#
# Security: NEVER commit .env file with real secrets!
# ==============================================

# ==============================================
# Application
# ==============================================
NODE_ENV=development
PORT=3000
HOST=0.0.0.0
LOG_LEVEL=info

# Service Mode
# - 'all': API + Workers in one process (good for MVP/development)
# - 'api': API server only (production API instances)
# - 'worker': Workers only (production worker instances)
MODE=all

# Service Info
SERVICE_NAME=ts-service-template
SERVICE_VERSION=1.0.0

# ==============================================
# Database (PostgreSQL)
# ==============================================
# Development (local Docker)
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/mydb

# Production example (managed database with SSL):
# DATABASE_URL=postgresql://user:pass@db-host.provider.com:5432/production_db?sslmode=require&connection_limit=20&pool_timeout=10

# ==============================================
# Redis (Required for token storage & rate limiting)
# ==============================================
# Option 1: Full URL (recommended)
REDIS_URL=redis://localhost:6379

# Option 2: Individual params
# REDIS_HOST=127.0.0.1
# REDIS_PORT=6379
# REDIS_PASSWORD=

# Production example (managed Redis with auth):
# REDIS_URL=redis://default:your-password@redis-host.provider.com:6379

# ==============================================
# Security - JWT
# ==============================================
# ⚠️ CRITICAL: Generate strong secret for production!
#
# Generate secure JWT secret:
#   openssl rand -base64 64
#
# Requirements:
# - Minimum 64 characters
# - High entropy (random, not dictionary words)
# - Different for each environment
JWT_SECRET=your-secret-key-change-this-in-production-min-64-chars-for-security-use-openssl-rand-base64-64-to-generate

# Token expiration times
JWT_ACCESS_EXPIRES_IN=15m
JWT_REFRESH_EXPIRES_IN=7d

# ==============================================
# CORS (Cross-Origin Resource Sharing)
# ==============================================
# Development: Allow all origins
CORS_ORIGIN=*

# Production: Specific domains only (comma-separated)
# CORS_ORIGIN=https://app.example.com,https://admin.example.com

# ==============================================
# Queue Configuration (BullMQ)
# ==============================================
# Number of concurrent jobs per worker
# - CPU-heavy jobs (video encoding, AI): 1-2
# - I/O-heavy jobs (API calls, webhooks): 10-20
QUEUE_CONCURRENCY=5

# Job retention
QUEUE_REMOVE_ON_COMPLETE=100
QUEUE_REMOVE_ON_FAIL=1000

# ==============================================
# Feature Flags
# ==============================================
# Swagger API documentation
# ⚠️ Set to 'false' in production for security
ENABLE_SWAGGER=true

# API rate limiting
ENABLE_RATE_LIMIT=true
RATE_LIMIT_MAX=100
RATE_LIMIT_TIMEWINDOW=60000

# Health check endpoint
ENABLE_HEALTH_CHECK=true

# Prometheus metrics endpoint
ENABLE_METRICS=false

# ==============================================
# External Services (Optional)
# ==============================================
# Add your API keys here
# API_KEY=

# Examples:
# OPENAI_API_KEY=sk-...
# STRIPE_API_KEY=sk_test_...
# SENDGRID_API_KEY=SG...
# AWS_ACCESS_KEY_ID=AKIA...
# AWS_SECRET_ACCESS_KEY=...

# ==============================================
# Advanced Queue Configuration (Optional)
# ==============================================
# Override per-queue concurrency (useful for production tuning)
# Format: QUEUE_<QUEUE_NAME>_<SETTING>=value
#
# Examples:
# QUEUE_WEBHOOK_PROCESSOR_CONCURRENCY=15
# QUEUE_WEBHOOK_PROCESSOR_ATTEMPTS=5
# QUEUE_VIDEO_GENERATION_CONCURRENCY=1
# QUEUE_EMAIL_SENDER_CONCURRENCY=20
